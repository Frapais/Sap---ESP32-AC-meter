esphome:
  name: "sap1"
  friendly_name: Sap1
  # includes:
    # - "https://github.com/porrey/MAX1704X"
    # - /config/esphome/custom_components/MAX17048_component.h
  libraries:
    - "Wire"
  on_boot: 
    then:
      # Start the script that will check the status of the binary sensor and decide whether to enter deep sleep or not
      # - script.execute: deep_sleep_evaluation

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "your_encryption_key"

ota:
  - platform: esphome
    password: "your_ota_password"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Test2 Fallback Hotspot"
    password: "youtr_fallback_password"

captive_portal:

# Example configuration entry for NanoCell-C3
i2c:
- id: bus_a
  sda: 2
  scl: 3
  scan: True

time:
  - platform: sntp
    id: my_time

# This is a "toggle" type input_boolean helper, created from the Home Assistant "settings" menu.
# When this binary sensor is "on" the deep sleep will be disabled.
# Be sure to enable deep sleep functionality AFTER you have configured the device on Home Assistant, otherwise this binary sensor state will not be read.
binary_sensor:
  - platform: homeassistant
    id: disable_deep_sleep
    entity_id: input_boolean.disable_deep_sleep

# Example configuration entry
sensor:
  - platform: ct_clamp
    sensor: adc_sensor
    name: "Measured Current"
    update_interval: 6s
    id: measured_current       #Measured in ampere (I)
    filters:
      - calibrate_linear:
          # Measured value of 0.032 maps to 4.2A
          # This is the value that you will get when you connect the clamp to a 230V AC line
          # and measure the current flowing through it.
          - 0.032 -> 4.2
          # Measured value of 0.107 maps to 18.4A
          # This is the value that you will get when you connect the clamp to a 230V AC line
          # and measure the current flowing through it.
          - 0.107-> 18.4
      - median:
          window_size: 10
          send_every: 10
          send_first_at: 10
    accuracy_decimals: 2

  - platform: adc
    pin: 0
    id: adc_sensor


  - platform: total_daily_energy
    name: "Total Daily Power Usage"
    accuracy_decimals: 1
    power_id: my_power

  - platform: template
    id: my_power
    name: "Measured Power"
    lambda: return id(measured_current).state * 230 / 1000; #Power = V*I/1000. So change 230V to whatever your mains voltage is)
    unit_of_measurement: 'kW'
    accuracy_decimals: 2
    update_interval: 1min



  - platform: max17043
    id: max17043_id
    i2c_id: bus_a
    battery_voltage:
      name: "Battery Voltage"
      accuracy_decimals: 1
    battery_level:
      name: "Battery"
      accuracy_decimals: 0
    update_interval: 1min



# This script sets the waiting time before going into sleep mode
# Once the delay time has passed, checks the status of the binary sensor mentioned above
# If the binary sensor status is "on", it disables deep sleep. Otherwise, it enters deep sleep for the set duration
script:
  - id: deep_sleep_evaluation
    mode: queued
    then:
      - delay: 60s
      - if:
          condition:
            binary_sensor.is_on: disable_deep_sleep
          then:
            - logger.log: 'Deep Sleep Disabled'
            - deep_sleep.prevent: deep_sleep_enabled
          else:
            - deep_sleep.enter: deep_sleep_enabled
      - script.execute: deep_sleep_evaluation

# Here, the deep sleep duration is declared
deep_sleep:
  id: deep_sleep_enabled
  sleep_duration: 10min
